#!/usr/bin/env python3-snakemake

import sys, json, os, string, argparse

def main():
    # check existance of env vars
    if os.getenv('PRODENV') == '' or os.getenv('PRODENV_DEFAULT_CONTAINER') == '':
        print('Error: source setup.sh before continuing')
        exit()

    parser = argparse.ArgumentParser(description='Initialize a new production cycle')
    parser.add_argument('prod_tag', 
                        help='name of directory in which the production cycle is created',
                        default='')
    parser.add_argument('-p', dest='path', 
                        help='set path to user src directory (default: clone reps in cycle)',
                        default='')
    parser.add_argument('-o', dest='organization', 
                        help='set name of github organization from which reps are cloned (default:legend-exp)', 
                        default='legend-exp')
    parser.add_argument('-b', dest='branch',
                        help='set name of branch to check out (default: master)', 
                        default='master')
    parser.add_argument('-c', dest='container',
                        help='set path to software container',
                        default=os.getenv('PRODENV_DEFAULT_CONTAINER'))
    parser.add_argument('-r', dest='ref_cycle', action='store_true',  
                        help='create a production cycle under prod-ref')
    args = parser.parse_args()


    if args.ref_cycle is True:
        path_cycle = os.getenv('PRODENV') + '/prod-ref/' + args.prod_tag
    else:
        path_cycle = os.getenv('PRODENV') + '/prod-usr/' + args.prod_tag

    if os.path.isdir(path_cycle):
        print('Error: data production cycle with this tag already exists')
        exit()

    ###############################################################################
    # Build new production enviroment
    ###############################################################################

    # Create production cycle structure and populate it
    # gen & genpar: generated data
    os.makedirs(path_cycle + '/gen')
    os.makedirs(path_cycle + '/genpar')
    os.makedirs(path_cycle + '/log')

    # meta: metadata, soon a github package
    os.makedirs(path_cycle + '/meta')
    os.system('\git clone git@github.com:' 
              + args.organization + '/legend-dataflow-hades.git' 
              + ' ' + path_cycle + '/dataflow'
              + ' ' + '--branch' + ' ' + args.branch)

    # src: user software
    python_path = args.path
    if python_path == "" or not os.path.isdir(python_path): 
        os.makedirs(path_cycle + '/src/python/')
        os.system('\git clone git@github.com:' 
                + args.organization + '/pygama.git' 
                + ' ' + path_cycle + '/src/python/pygama' 
                + ' ' + '--branch' + ' ' + args.branch)
        os.system('\git clone git@github.com:' 
                + args.organization + '/pyfcutils.git' 
                + ' ' + path_cycle + '/src/python/pyfcutils' 
                + ' ' + '--branch' + ' ' + args.branch)

        python_path = '$_/src/python'

    # venv: venv local files
    os.makedirs(path_cycle + '/venv/default/user')
    os.symlink(args.container, path_cycle + '/venv/default/rootfs.sif')

    # Create json config file
    config_file = {
        "setups": {
            "l200hades": {
                "paths": {
                    "orig": os.getenv('PRODENV_DEFAULT_ORIG'),
                    "gen": "$_/gen",
                    "meta": "$_/meta",
                    "par":  "$_/par",
                    "log":  "$_/log",
                    "src": {
                        "python": python_path
                    }
                },
                "execenv": {
                    "default": {
                    "env": { 
                        "VENV_BASE_DIR": "$_/venv" 
                    },
                    "exec": [os.getenv('PRODENV') + '/tools/bin/venv', "default"]
                    }
                }  
            }
        }
    } 

    with open(path_cycle + '/config.json', 'w') as outfile:
        json.dump(config_file, outfile, ensure_ascii=False, indent=4)

    config_dsp = {
        "outputs": [ "bl", "bl_sig"],
        "processors":{
            "bl, bl_sig":{
                "function": "mean_stdev",
                "module": "pygama.dsp.processors",
                "args" : ["waveform", "bl", "bl_sig"],
                "prereqs": ["waveform"],
                "unit": ["ADC", "ADC"]
            }
        }
    }

    with open(path_cycle + '/meta/config_dsp.json', 'w') as outfile:
        json.dump(config_dsp, outfile, ensure_ascii=False, indent=4)

if __name__=="__main__":
    main()
